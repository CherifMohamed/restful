<?php

/**
 * @file
 * Contains RestfulEntityUserAccessTestCase
 */

use Drupal\restful\Exception\ForbiddenException;
use Drupal\restful\Http\Request;

class RestfulEntityUserAccessTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'User resource access',
      'description' => 'Test access to the base "users" resource.',
      'group' => 'RESTful',
    );
  }

  public function setUp() {
    parent::setUp('restful');
  }

  /**
   * Test access control for viewing the "users" resource.
   */
  public function testViewAccess() {
    $resource_manager = restful()->getResourceManager();
    $user1 = $this->drupalCreateUser();
    $user2 = $this->drupalCreateUser(array('access user profiles'));

    // Non-privileged user.
    $handler = $resource_manager->getPlugin('users:1.0');
    $handler->setAccount($user1);

    try {
      $handler->setRequest(Request::create('api/v1.0/users/' . $user2->uid));
      $handler->setPath($user2->uid);
      $handler->process();
      $this->fail('Non-privileged user can view another user.');
    }
    catch (ForbiddenException $e) {
      $this->pass('Non-privileged user cannot view another user.');
    }
    catch (\Exception $e) {
      $this->fail('Incorrect exception thrown for non-privileged user accessing another user.');
    }

    // Listing of users.
    try {
      $handler->setRequest(Request::create('api/v1.0/users'));
      $handler->setPath('');
      $handler->process();
      $this->fail('Non-privileged user can view listing of users.');
    }
    catch (ForbiddenException $e) {
      $this->pass('Non-privileged user cannot view listing of users.');
    }
    catch (\Exception $e) {
      $this->fail('Incorrect exception thrown for non-privileged user accessing listing of users.');
    }

    // View own user account.
    $handler->setRequest(Request::create('api/v1.0/users/' . $user1->uid));
    $handler->setPath($user1->uid);
    $response = $handler->process();
    $result = $response[0];
    $this->assertEqual($result['mail'], $user1->mail, 'User can see own mail.');

    // Privileged user, watching another user's profile.
    $handler->setAccount($user2);
    $response = $handler->process();
    $result = $response[0];
    $expected_result = array(
      'id' => $user1->uid,
      'label' => $user1->name,
      'self' => $handler->versionedUrl($user1->uid),
    );

    $this->assertEqual($result, $expected_result, "Privileged user can access another user's resource.");

    // Listing of users.
    $handler->setRequest(Request::create('api/v1.0/users'));
    $handler->setPath('');
    $result = $handler->process();
    // Check we have all the expected users count (user ID 1 and our declared
    // users).
    $this->assertTrue(count($result[0]) == 3, 'Privileged user can access listing of users.');
  }
}
